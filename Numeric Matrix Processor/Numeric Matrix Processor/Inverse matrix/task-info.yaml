type: edu
custom_name: stage6
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            1.14717, 2.03717, 2.9711,
                            2.19055, 4.52055, 7.20788,
                            3.67009, 0.590087, 1.33819
                        }))
                    .setInput(
                        "6\n" +
                            "3 3\n" +
                            "0.396796 -0.214938 0.276735\n" +
                            "5.19655 -2.06983 -0.388886\n" +
                            "-3.3797 1.50219 0.159794\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            0.396796, -0.214938, 0.276735, -0.5092,
                            5.19655, -2.06983, -0.388886, -3.14252,
                            -3.3797, 1.50219, 0.159794, 2.04842,
                            -0.593332, 0.230065, 0.00259267, 0.50345
                        }))
                    .setInput(
                        "6\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/DoubleMatrix.java
  visible: true
  text: "package processor;\n\npublic class DoubleMatrix<T extends Number> implements\
    \ Matrix<Double> {\n    private final AbstractMatrix<Double> delegate;\n\n   \
    \ public DoubleMatrix(int rows, int columns, Double[][] data) {\n        delegate\
    \ = new AbstractMatrix<>(rows, columns, data, TypeOperations.doubles());\n   \
    \ }\n\n    @Override\n    public int getRows() {\n        return delegate.getRows();\n\
    \    }\n\n    @Override\n    public int getColumns() {\n        return delegate.getColumns();\n\
    \    }\n\n    @Override\n    public Double[][] data() {\n        return delegate.data();\n\
    \    }\n\n    @Override\n    public String content() {\n        return delegate.content();\n\
    \    }\n\n    @Override\n    public Double[] column(int index) {\n        return\
    \ delegate.column(index);\n    }\n\n    @Override\n    public Matrix<Double> scalarMultiply(Double\
    \ k) {\n        return delegate.scalarMultiply(k);\n    }\n\n    @Override\n \
    \   public Matrix<Double> plus(Matrix<Double> m) {\n        return delegate.plus(m);\n\
    \    }\n\n    @Override\n    public Matrix<Double> times(Matrix<Double> b) {\n\
    \        return delegate.times(b);\n    }\n\n    @Override\n    public Matrix<Double>\
    \ transpose(TranspositionType type) {\n        return delegate.transpose(type);\n\
    \    }\n    \n    @Override\n    public Double det() {\n        return delegate.det();\n\
    \    }\n}\n"
  learner_created: true
- name: src/processor/TranspositionType.java
  visible: true
  text: |
    package processor;

    public enum TranspositionType {
        MAIN_DIAG, SIDE_DIAG, VERTICAL_LINE, HORIZONTAL_LINE
    }
  learner_created: true
- name: src/processor/NotMatchingDimensionsException.java
  visible: true
  text: |
    package processor;

    public class NotMatchingDimensionsException extends RuntimeException {
        public NotMatchingDimensionsException(String s) {
            super(s);
        }

        public NotMatchingDimensionsException() {
            super();
        }
    }
  learner_created: true
- name: src/processor/TransposeOperation.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;
    import java.util.Collections;
    import java.util.List;

    public enum TransposeOperation implements MenuEntry {
        MAIN_DIAG(1, "Main diagonal", TranspositionType.MAIN_DIAG),
        SIDE_DIAG(2, "Side diagonal", TranspositionType.SIDE_DIAG),
        VERTICAL_LINE(3, "Vertical line", TranspositionType.VERTICAL_LINE),
        HORIZONTAL_LINE(4, "Horizontal line", TranspositionType.HORIZONTAL_LINE);
        private final int choice;
        private final String title;
        private final TranspositionType type;

        TransposeOperation(int choice, String title, TranspositionType type) {
            this.choice = choice;
            this.title = title;
            this.type = type;
        }

        public static TransposeOperation byChoice(int choice) {
            return Arrays.stream(values())
                    .filter(op -> op.getChoice() == choice)
                    .findAny()
                    .orElseThrow(() -> new IllegalStateException("Unsupported choice"));
        }

        public TranspositionType getType() {
            return type;
        }

        @Override
        public int getChoice() {
            return choice;
        }

        @Override
        public String getTitle() {
            return title;
        }

        @Override
        public List<MenuEntry> getChildren() {
            return Collections.emptyList();
        }
    }
  learner_created: true
- name: src/processor/Matrix.java
  visible: true
  text: "package processor;\n\npublic interface Matrix<T extends Number> {\n    int\
    \ getRows();\n\n    int getColumns();\n\n    T[][] data();\n\n    String content();\n\
    \n    default T[] row(int index) {\n        return data()[index];\n    }\n   \
    \ \n    T[] column(int index);\n    \n    Matrix<T> scalarMultiply(T k);\n\n \
    \   Matrix<T> plus(Matrix<T> m);\n\n    Matrix<T> times(Matrix<T> b);\n    \n\
    \    Matrix<T> transpose(TranspositionType type);\n    \n    T det();\n}\n"
  learner_created: true
- name: src/processor/DoubleTypeOperations.java
  visible: true
  text: |
    package processor;

    public class DoubleTypeOperations implements TypeOperations<Double> {
        @Override
        public Double add(Double a, Double b) {
            return a + b;
        }

        @Override
        public Double multiply(Double a, Double b) {
            return a * b;
        }

        @Override
        public Double zero() {
            return 0d;
        }

        @Override
        public Double one() {
            return 1d;
        }

        @Override
        public Double negate(Double a) {
            return -a;
        }

        @Override
        public Class<Double> typeClass() {
            return Double.class;
        }
    }
  learner_created: true
- name: src/processor/IntTypeOperations.java
  visible: true
  text: |
    package processor;

    public class IntTypeOperations implements TypeOperations<Integer> {
        @Override
        public Integer add(Integer a, Integer b) {
            return a + b;
        }

        @Override
        public Integer multiply(Integer a, Integer b) {
            return a * b;
        }

        @Override
        public Integer zero() {
            return 0;
        }

        @Override
        public Integer one() {
            return 1;
        }

        @Override
        public Integer negate(Integer a) {
            return -a;
        }

        @Override
        public Class<Integer> typeClass() {
            return Integer.class;
        }
    }
  learner_created: true
- name: src/processor/AbstractMatrix.java
  visible: true
  text: |
    package processor;

    import java.lang.reflect.Array;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.stream.Collectors;

    class AbstractMatrix<T extends Number> implements Matrix<T> {
        private final int rows;
        private final int columns;
        private final T[][] data;
        private final TypeOperations<T> operations;

        AbstractMatrix(int rows, int columns, TypeOperations<T> operations) {
            this.rows = rows;
            this.columns = columns;
            this.data = (T[][]) Array.newInstance(operations.typeClass(), rows, columns);
            this.operations = operations;
        }

        AbstractMatrix(int rows, int columns, T[][] data, TypeOperations<T> operations) {
            this.rows = rows;
            this.columns = columns;
            this.data = data;
            this.operations = operations;
        }

        @Override
        public int getRows() {
            return rows;
        }

        @Override
        public int getColumns() {
            return columns;
        }

        @Override
        public T[][] data() {
            return data;
        }

        @Override
        public String content() {
            return Arrays.stream(data)
                    .map(row -> joinToString(" ", row))
                    .collect(Collectors.joining(System.lineSeparator()));
        }

        @Override
        public T[] column(int index) {
            T[] res = (T[]) Array.newInstance(operations.typeClass(), rows);
            for (int i = 0; i < rows; i++) {
                res[i] = data[i][index];
            }
            return res;
        }

        @Override
        public Matrix<T> scalarMultiply(T k) {
            AbstractMatrix<T> res = new AbstractMatrix<T>(rows, columns, operations);

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    res.data[i][j] = operations.multiply(data[i][j], k);
                }
            }
            return res;
        }

        private static <T> String joinToString(String delimiter, T... arr) {
            return Arrays.stream(arr)
                    .map(Objects::toString)
                    .collect(Collectors.joining(delimiter));
        }

        @Override
        public Matrix<T> plus(Matrix<T> matrix) {
            if (rows != matrix.getRows() || columns != matrix.getColumns()) {
                throw new NotMatchingDimensionsException();
            }
            AbstractMatrix<T> res = new AbstractMatrix<>(rows, columns, operations);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    res.data[i][j] = operations.add(data[i][j], matrix.data()[i][j]);
                }
            }
            return res;
        }

        @Override
        public Matrix<T> times(Matrix<T> matrix) {
            if (columns != matrix.getRows()) {
                throw new NotMatchingDimensionsException();
            }
            AbstractMatrix<T> res = new AbstractMatrix<>(rows, matrix.getColumns(), operations);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < matrix.getColumns(); j++) {
                    res.data[i][j] = dotProduct(row(i), matrix.column(j));
                }
            }
            return res;
        }

        private AbstractMatrix<T> copyRotate() {
            return new AbstractMatrix<>(columns, rows, operations);
        }

        private AbstractMatrix<T> transposeMainDiag() {
            AbstractMatrix<T> res = copyRotate();
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j <= i; j++) {
                    int offset = i - j;
                    res.data[i][j] = data[i - offset][i];
                    res.data[i - offset][i] = data[i][j];
                }
            }
            return res;
        }

        private AbstractMatrix<T> transposeSideDiag() {
            AbstractMatrix<T> res = copyRotate();
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns - i; j++) {
                    int offset = columns - i - j - 1;
                    res.data[i][j] = data[i + offset][columns - i - 1];
                    res.data[i + offset][columns - i - 1] = data[i][j];
                }
            }
            return res;
        }

        private AbstractMatrix<T> transposeVerticalLine() {
            AbstractMatrix<T> res = copy();
            boolean hasEvenColumns = columns % 2 == 0;
            int middle = columns / 2;
            int columnsLimit = hasEvenColumns ? middle : middle + 1;
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columnsLimit; j++) {
                    int offset = hasEvenColumns ? middle - j - 1 : middle - j;
                    int mirrorJ = middle + offset;
                    res.data[i][j] = data[i][mirrorJ];
                    res.data[i][mirrorJ] = data[i][j];
                }
            }
            return res;
        }

        private AbstractMatrix<T> transposeHorizontalLine() {
            AbstractMatrix<T> res = copy();
            boolean hasEvenRows = rows % 2 == 0;
            int middle = rows / 2;
            int rowsLimit = hasEvenRows ? middle : middle + 1;
            for (int i = 0; i < rowsLimit; i++) {
                for (int j = 0; j < columns; j++) {
                    int offset = hasEvenRows ? middle - i - 1 : middle - i;
                    int mirrorI = middle + offset;
                    res.data[i][j] = data[mirrorI][j];
                    res.data[mirrorI][j] = data[i][j];
                }
            }
            return res;
        }

        @Override
        public Matrix<T> transpose(TranspositionType type) {
            switch (type) {
                case MAIN_DIAG:
                    return transposeMainDiag();
                case SIDE_DIAG:
                    return transposeSideDiag();
                case VERTICAL_LINE:
                    return transposeVerticalLine();
                default:
                    return transposeHorizontalLine();
            }
        }

        private AbstractMatrix<T> minor(int minorI, int minorJ) {
            final AbstractMatrix<T> res = new AbstractMatrix<>(rows - 1, columns - 1, operations);
            for (int i = 0; i < rows; i++) {
                if (i == minorI) {
                    continue;
                }
                for (int j = 0; j < columns; j++) {
                    if (j == minorJ) {
                        continue;
                    }
                    int resI = (i > minorI) ? i - 1 : i;
                    int resJ = (j > minorJ) ? j - 1 : j;
                    res.data[resI][resJ] = data[i][j];
                }
            }
            return res;
        }

        private T cofactor(int i, int j) {
            final T sign = ((i + j) % 2 == 0) ? operations.one() : operations.negateOne();
            return operations.multiply(sign, minor(i, j).det());
        }

        @Override
        public T det() {
            if (rows != columns) {
                throw new NotMatchingDimensionsException("Determinant can be calculated only for square matrix");
            }
            if (rows == 2) {
                T a = operations.multiply(data[0][0], data[1][1]);
                T b = operations.multiply(data[0][1], data[1][0]);
                return operations.minus(a, b);
            }
            T res = operations.zero();
            for (int i = 0; i < columns; i++) {
                T el = operations.multiply(data[0][i], cofactor(0, i));
                res = operations.add(res, el);
            }
            return res;
        }

        private AbstractMatrix<T> copy() {
            return new AbstractMatrix<>(rows, columns, operations);
        }

        private T dotProduct(T[] row, T[] column) {
            T res = operations.zero();
            for (int i = 0; i < row.length; i++) {
                final T c = operations.multiply(row[i], column[i]);
                res = operations.add(res, c);
            }
            return res;
        }
    }
  learner_created: true
- name: src/processor/Operation.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;
    import java.util.List;

    public enum Operation implements MenuEntry {
        ADD(1, "Add matrices"),
        SCALAR(2, "Multiply matrix by a constant"),
        TIMES(3, "Multiply matrices"),
        TRANSPOSE(4, "Transpose matrix", TransposeOperation.values()),
        DETERMINANT(5, "Calculate a determinant"),
        EXIT(0, "Exit");

        private final int choice;
        private final String title;
        private final List<MenuEntry> children;

        Operation(int choice, String title) {
            this(choice, title, new MenuEntry[] {});
        }

        Operation(int choice, String title, MenuEntry... values) {
            this.choice = choice;
            this.title = title;
            this.children = Arrays.asList(values);
        }

        @Override
        public int getChoice() {
            return choice;
        }

        @Override
        public String getTitle() {
            return title;
        }

        @Override
        public List<MenuEntry> getChildren() {
            return children;
        }

        public static Operation byChoice(int choice) {
            return Arrays.stream(values())
                    .filter(op -> op.getChoice() == choice)
                    .findAny()
                    .orElseThrow(() -> new IllegalStateException("Unsupported choice"));
        }
    }
  learner_created: true
- name: src/processor/IOUtil.java
  visible: true
  text: |
    package processor;


    import java.util.Scanner;

    public class IOUtil {
        private IOUtil() {
        }

        public static Matrix<Double> readDoubleMatrix(Scanner scanner, int rows, int columns) {
            final Double[][] data = new Double[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    data[i][j] = scanner.nextDouble();
                }
            }
            return new DoubleMatrix<>(rows, columns, data);
        }
    }
  learner_created: true
- name: src/processor/MenuEntry.java
  visible: true
  text: |
    package processor;

    import java.util.List;

    public interface MenuEntry {
        int getChoice();

        String getTitle();

        List<MenuEntry> getChildren();
    }
  learner_created: true
- name: src/processor/TypeOperations.java
  visible: true
  text: |
    package processor;

    public interface TypeOperations<T> {
        T add(T a, T b);

        T multiply(T a, T b);

        T zero();

        T one();

        T negate(T a);

        default T negateOne() {
            return negate(one());
        }

        default T minus(T a, T b) {
            return add(a, negate(b));
        }

        Class<T> typeClass();

        static TypeOperations<Integer> integers() {
            return new IntTypeOperations();
        }

        static TypeOperations<Double> doubles() {
            return new DoubleTypeOperations();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5470#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 17 Apr 2022 18:22:57 UTC
record: -1
