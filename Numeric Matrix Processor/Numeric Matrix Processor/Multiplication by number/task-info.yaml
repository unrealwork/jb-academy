type: edu
custom_name: stage2
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: "package processor;\n\npublic interface Matrix<T extends Number> {\n    int\
    \ getRows();\n\n    int getColumns();\n\n    T[][] data();\n\n    String content();\n\
    \n    default Number[] get(int index) {\n        return data()[index];\n    }\n\
    \n    Matrix<T> scalarMultiply(T k);\n    \n    Matrix<T> plus(Matrix<T> m);\n\
    }\n"
  learner_created: true
- name: src/processor/IntMatrix.java
  visible: true
  text: |
    package processor;

    import java.util.Arrays;
    import java.util.Objects;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    public class IntMatrix implements Matrix<Integer> {
        private final int rows;
        private final int columns;
        private final Integer[][] data;


        private IntMatrix(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            this.data = new Integer[rows][columns];
        }

        private IntMatrix(int rows, int columns, Integer[][] data) {
            this.rows = rows;
            this.columns = columns;
            this.data = data;
        }

        public static IntMatrix withDimension(int rows, int columns) {
            return new IntMatrix(rows, columns);
        }

        @Override
        public int getRows() {
            return rows;
        }

        @Override
        public int getColumns() {
            return columns;
        }

        @Override
        public Integer[][] data() {
            return data;
        }

        @Override
        public String content() {
            return Arrays.stream(data)
                    .map(row -> joinToString(" ", row))
                    .collect(Collectors.joining(System.lineSeparator()));
        }

        private static <T> String joinToString(String delimiter, T... arr) {
            return Arrays.stream(arr)
                    .map(Objects::toString)
                    .collect(Collectors.joining(delimiter));
        }

        @Override
        public Matrix<Integer> plus(Matrix<Integer> matrix) {
            if (rows != matrix.getRows() || columns != matrix.getColumns()) {
                throw new NotMatchingDimensionsException();
            }
            IntMatrix res = withDimension(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    res.data[i][j] = data[i][j] + matrix.data()[i][j];
                }
            }
            return res;
        }

        public static IntMatrix read(final Scanner scanner) {
            final int rows = scanner.nextInt();
            final int columns = scanner.nextInt();
            final IntMatrix matrix = IntMatrix.withDimension(rows, columns);
            Integer[][] data = new Integer[rows][columns];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    data[i][j] = scanner.nextInt();
                }
            }
            return new IntMatrix(rows, columns, data);
        }
    }
  learner_created: true
- name: src/processor/IOUtil.java
  visible: true
  text: |
    package processor;


    import java.util.Scanner;

    public class IOUtil {
        private IOUtil() {

        }
    }
  learner_created: true
- name: src/processor/NotMatchingDimensionsException.java
  visible: true
  text: |
    package processor;

    public class NotMatchingDimensionsException extends RuntimeException {
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/324/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 11 Apr 2022 01:46:54 UTC
record: -1
