#
# This is a scenario for testing of the Guessing Game
#
---
- [start]

- - contains
  - I want to learn about animals
  - |
    When the program starts, the knowledge tree is empty.
    The program should express its desire to learn about animals.

- - contains
  - Which animal do you like
  - To build an initial tree of knowledge, the program must ask the user about his favorite animal.

- [input, cat]

- - contains
  - play a game
  - After the user specifying a favorite animal, the program should offer him to play a game.

- - contains
  - You think of an animal
  - The program must explain the rules of the game to the user.

- - contains
  - Press enter
  - The program should be paused. The user will think of an animal and then press Enter.

- [input, ""]

#
# After user press Enter the game started!
#

- - contains
  - Is it a cat?
  - The very first question in the very first game should undoubtedly be about a beloved animal.

- [input, No] # We think of about other animal, not about the cat

- - contains
  - I give up. What animal do you have in mind?
  - If the program can't guess the animal, it must give up.

- [input, dog] # Of course, our second animal is a dog!

- - contains
  - Specify a fact that distinguishes a cat from a dog
  - The program should find out how one animal differs from another.

- [input, "it can climb trees"]

- - contains
  - correct for a dog?
  - The program should clarify if the statement is correct for a dog.

- [input, no]

- - contains
  - The cat can climb trees
  - The program must generate the correct fact for the first animal.

- - find
  - The dog can.t climb tree
  - The program must generate the correct fact for the second animal.

- - find
  - "(?i)(again|repeat|one more)"
  - The program should invite the user to play this wonderful game again.

- [input, yes] # Without a doubt, we are playing again!

- - contains
  - You think of an animal
  - The program must explain the rules of the game to the user.

- - find
  - Press enter when you.re ready
  - The program should be paused. The user will think of an animal and then press Enter.

- [input, ""]

#
# The second game just started!
#
# Now in our Knowledge Tree has two animals and one fact.
#

- - contains
  - Can it climb trees?
  - After the first game, the starting question should be the question of fact.

- [input, yes]

- - contains
  - Is it a cat?
  - The program must assume that the animal is a cat.

- - input
  - |
    no
    lynx
    it has tassels on his ears
    yes
    yes

# We had played the game, and would like to play again.

- [input, ""]

#
# The third game just started!
#
# Now in our Knowledge Tree has three animals and two fact.
#

- - contains
  - Can it climb trees?
  - |
  - The very first fact that the program learns is always the root element.
  - In every game, the question of this fact should be the first question.

- [input, no] # No, the animal can't climb trees

- - contains
  - Is it a dog?
  - The program must assume that the animal is a dog.

- - input
  - |
    no
    wolf
    it is living in the forest
    yes
    yes

# We had played the game, and would like to play again.

- [input, ""]
#
# The forth game just started!
#
# The Knowledge Tree has four animals and tree fact.
#
# Now we will use data from the data file to substitute user answers.
# This will allow us to check the correctness of the tree construction.

- [input, "{0}"]

- - contains
  - "Is it {1}?"
  - "The expected animal must be {1}"

- [input, yes] # The program guessed the animal we conceived

- [input, no] # We don't want to play anymore

- - finish
  - If we do not want to play any more, then the program should exit.

