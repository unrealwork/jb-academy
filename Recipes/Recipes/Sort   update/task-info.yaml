type: edu
custom_name: Sort & update
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            final Gson gson = new Gson();
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),
            // test 3
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            // test 8
            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1]),

            () -> testDeleteRecipe(recipeIds.get(0)),
            // test 11
            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1]),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13]);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14]);
            },

            // test 27
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert"),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream"),

            // test 29
            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1"),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2"),

            // test 31
            () -> testGetRecipesBadRequestStatusCode(0),
            () -> testGetRecipesBadRequestStatusCode(1),
            () -> testGetRecipesBadRequestStatusCode(2),
            () -> testGetRecipesBadRequestStatusCode(5),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9]),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8]),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9])
        };


        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String category) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam("category", category).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String name) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam("name", name).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/presentation/BaseModel.java
  visible: true
  text: |
    package recipes.presentation;

    import recipes.persistance.BaseDTO;

    public interface BaseModel<T extends BaseDTO<?>> {
        T toDto();
    }
  learner_created: true
- name: src/recipes/presentation/RecipeApiController.java
  visible: true
  text: |
    package recipes.presentation;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;
    import recipes.service.AdditionResult;
    import recipes.persistance.Recipe;
    import recipes.service.RecipeService;

    import javax.validation.Valid;

    @RestController
    @RequestMapping("/api")
    public class RecipeApiController {
        private final RecipeService recipeService;

        public RecipeApiController(RecipeService recipeService) {
            this.recipeService = recipeService;
        }

        @GetMapping("recipe/{id}")
        public RecipeModel get(final @PathVariable Integer id) {
            return recipeService.findById(id)
                    .map(Recipe::toModel)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        }

        @PostMapping("recipe/new")
        public AdditionResult add(@RequestBody @Valid RecipeModel recipe) {
            return recipeService.add(recipe.toDto());
        }

        @DeleteMapping("recipe/{id}")
        public ResponseEntity<Void> delete(@PathVariable int id) {
            Recipe recipe = recipeService.findById(id)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
            recipeService.deleteById(recipe.getId());
            return ResponseEntity.noContent().build();
        }
    }
  learner_created: true
- name: src/recipes/presentation/RecipeModel.java
  visible: true
  text: |
    package recipes.presentation;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import recipes.persistance.Recipe;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotEmpty;
    import java.util.Arrays;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class RecipeModel implements BaseModel<Recipe> {
        @NotBlank
        private String name;
        @NotBlank
        private String description;
        @NotEmpty
        private String[] ingredients;
        @NotEmpty
        private String[] directions;

        @Override
        public Recipe toDto() {
            Recipe recipe = new Recipe();
            recipe.setDescription(description);
            recipe.setName(name);
            recipe.setIngredients(Arrays.asList(ingredients));
            recipe.setDirections(Arrays.asList(directions));
            return recipe;
        }
    }
  learner_created: true
- name: src/recipes/persistance/RecipeRepository.java
  visible: true
  text: |
    package recipes.persistance;

    import org.springframework.data.repository.CrudRepository;

    public interface RecipeRepository extends CrudRepository<Recipe, Integer> {
    }
  learner_created: true
- name: src/recipes/service/RecipeService.java
  visible: true
  text: |
    package recipes.service;

    import lombok.RequiredArgsConstructor;
    import org.springframework.stereotype.Service;
    import recipes.persistance.Recipe;
    import recipes.persistance.RecipeRepository;

    import java.util.Optional;

    @Service
    @RequiredArgsConstructor
    public class RecipeService implements MapRecipeService {
        private final RecipeRepository recipeRepository;

        @Override
        public synchronized AdditionResult add(Recipe recipe) {
            final Recipe savedRecipe = recipeRepository.save(recipe);
            return AdditionResult.of(savedRecipe.getId());
        }

        @Override
        public synchronized Optional<Recipe> findById(final int id) {
            return recipeRepository.findById(id);
        }

        @Override
        public void deleteById(int id) {
            recipeRepository.deleteById(id);
        }
    }
  learner_created: true
- name: src/recipes/service/MapRecipeService.java
  visible: true
  text: "package recipes.service;\n\nimport recipes.persistance.Recipe;\n\nimport\
    \ java.util.Optional;\n\npublic interface MapRecipeService {\n    AdditionResult\
    \ add(Recipe recipe);\n\n    Optional<Recipe> findById(int id);\n    \n    void\
    \ deleteById(int id);\n}\n"
  learner_created: true
- name: src/recipes/service/AdditionResult.java
  visible: true
  text: |
    package recipes.service;

    public class AdditionResult {
        private final int id;

        public static AdditionResult of(final int id) {
            return new AdditionResult(id);
        }

        private AdditionResult(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }
    }
  learner_created: true
- name: src/recipes/persistance/Recipe.java
  visible: true
  text: "package recipes.persistance;\n\nimport lombok.Data;\nimport recipes.persistance.BaseDTO;\n\
    import recipes.presentation.RecipeModel;\n\nimport javax.persistence.ElementCollection;\n\
    import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport\
    \ javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.util.List;\n\
    \n@Data\n@Entity\npublic class Recipe implements BaseDTO<RecipeModel> {\n    @Id\n\
    \    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int id;\n\n\
    \    private String name;\n    private String description;\n    @ElementCollection\n\
    \    private List<String> ingredients;\n    @ElementCollection\n    private List<String>\
    \ directions;\n\n    @Override\n    public RecipeModel toModel() {\n        return\
    \ new RecipeModel(name, description, \n                ingredients.toArray(String[]::new),\
    \ directions.toArray(String[]::new)\n        );\n    }\n}\n"
  learner_created: true
- name: src/recipes/persistance/BaseDTO.java
  visible: true
  text: |
    package recipes.persistance;

    import recipes.presentation.BaseModel;

    public interface BaseDTO<T extends BaseModel<?>> {
        T toModel();
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/920/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #27

    GET /api/recipe/search/?category=dessert should respond with status code 200, responded: 400

    Response body:
    {&quot;timestamp&quot;:&quot;2021-09-08T05:09:16.647+00:00&quot;,&quot;status&quot;:400,&quot;error&quot;:&quot;Bad Request&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/api/recipe/search/&quot;}

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-09-08 08:09:11.266  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication on DESKTOP-SUO3NSU with PID 14080 (started by unrea in C:\Users\unrea\IdeaProjects\jb-academy\Recipes\Recipes\task)
    2021-09-08 08:09:11.269  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-09-08 08:09:12.036  INFO 14080 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-09-08 08:09:12.078  INFO 14080 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 1 JPA repository interfaces.
    2021-09-08 08:09:12.530  INFO 14080 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2021-09-08 08:09:12.539  INFO 14080 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-09-08 08:09:12.540  INFO 14080 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-09-08 08:09:12.635  INFO 14080 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-09-08 08:09:12.635  INFO 14080 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1330 ms
    2021-09-08 08:09:12.830  INFO 14080 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-09-08 08:09:12.864  INFO 14080 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-09-08 08:09:12.896  WARN 14080 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-09-08 08:09:12.914  INFO 14080 --- [         task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.17.Final
    2021-09-08 08:09:13.064  INFO 14080 --- [         task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2021-09-08 08:09:13.164  INFO 14080 --- [         task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-09-08 08:09:13.321  INFO 14080 --- [         task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-09-08 08:09:13.338  INFO 14080 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-09-08 08:09:13.978  INFO 14080 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-09-08 08:09:13.985  INFO 14080 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-09-08 08:09:14.027  INFO 14080 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-09-08 08:09:14.065  INFO 14080 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2021-09-08 08:09:14.066  INFO 14080 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-09-08 08:09:14.320  INFO 14080 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-09-08 08:09:14.331  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 3.399 seconds (JVM running for 4.087)
    2021-09-08 08:09:14.598  INFO 14080 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-09-08 08:09:14.599  INFO 14080 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-09-08 08:09:14.606  INFO 14080 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
    2021-09-08 08:09:15.495  INFO 14080 --- [     Thread-315] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-09-08 08:09:15.497  INFO 14080 --- [     Thread-315] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;
    2021-09-08 08:09:15.498  INFO 14080 --- [     Thread-315] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2021-09-08 08:09:15.518  INFO 14080 --- [     Thread-315] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-09-08 08:09:15.568  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication on DESKTOP-SUO3NSU with PID 14080 (started by unrea in C:\Users\unrea\IdeaProjects\jb-academy\Recipes\Recipes\task)
    2021-09-08 08:09:15.568  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-09-08 08:09:15.821  INFO 14080 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2021-09-08 08:09:15.828  INFO 14080 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6ms. Found 1 JPA repository interfaces.
    2021-09-08 08:09:15.890  INFO 14080 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2021-09-08 08:09:15.891  INFO 14080 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-09-08 08:09:15.891  INFO 14080 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-09-08 08:09:15.910  INFO 14080 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-09-08 08:09:15.910  INFO 14080 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 340 ms
    2021-09-08 08:09:15.973  INFO 14080 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-09-08 08:09:15.976  INFO 14080 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-09-08 08:09:15.982  INFO 14080 --- [         task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2021-09-08 08:09:15.995  WARN 14080 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-09-08 08:09:15.996  INFO 14080 --- [         task-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2021-09-08 08:09:15.997  INFO 14080 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-09-08 08:09:16.055  INFO 14080 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-09-08 08:09:16.055  INFO 14080 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-09-08 08:09:16.122  INFO 14080 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-09-08 08:09:16.133  INFO 14080 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2021-09-08 08:09:16.133  INFO 14080 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2021-09-08 08:09:16.156  INFO 14080 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2021-09-08 08:09:16.160  INFO 14080 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 0.613 seconds (JVM running for 5.915)
    2021-09-08 08:09:16.166  INFO 14080 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-09-08 08:09:16.166  INFO 14080 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-09-08 08:09:16.168  INFO 14080 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
    2021-09-08 08:09:16.646  WARN 14080 --- [nio-8881-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required String parameter &#39;name&#39; is not present]
  time: Wed, 08 Sep 2021 05:09:17 UTC
record: -1
