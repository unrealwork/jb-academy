type: edu
files:
- name: src/metro/Main.java
  visible: true
  text: |
    package metro;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class Tests extends StageTest<String> {
        // test from the previous stage with one line
        @DynamicTest(order = 1)
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            main.start("./test/baltimore.json");
            String output = main.execute("/output \"SubwayLink\"").trim();

            checkDepots(output);
            checkOutputLength(output, 16);
            assertStations(output, new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"});

            return CheckResult.correct();
        }

        // test of example
        @DynamicTest(order = 2)
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            checkDepots(output);
            checkOutputLength(output, 17);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"});

            output = main.execute("/output \"m2\"");
            checkDepots(output);
            checkOutputLength(output, 16);
            assertStations(output, new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"});

            return CheckResult.correct();
        }

        // example test pt.2 (with addition)
        @DynamicTest(order = 3)
        CheckResult test2_1() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 18);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"});

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 19);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 20);
            assertStations(output, new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 4)
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // test of a case from the example
        @DynamicTest(order = 5)
        CheckResult test5() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null}, {"Petriny", null}, {"Nadrazi Veleslavin", null}, {"Borislavka", null},
                {"Dejvicka", null}, {"Hradcanska", null}, {"Malostranska", null}, {"Staromestska", null},
                {"Mustek", "Linka B"}, {"Muzeum", "Linka C"}, {"Namesti Miru", null}, {"Jiriho z Podebrad", null},
                {"Flora", null}, {"Zelivskeho", null}, {"Strasnicka", null}, {"Skalka", null}, {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);
            checkOutputLength(output, 19);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult test6() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{{"Nemocnice Motol", null}, {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null}, {"Borislavka", null}, {"Dejvicka", null}, {"Hradcanska", null},
                {"Malostranska", null}, {"Staromestska", null}, {"Mustek", "Linka B"}, {"Muzeum", "Linka C"},
                {"Namesti Miru", null}, {"Jiriho z Podebrad", null}, {"Flora", null}, {"Zelivskeho", null},
                {"Strasnicka", null}, {"Skalka", null}, {"Depo Hostivar", null}};

            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);
            checkOutputLength(output, 19);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {
                if (!sOutput[i + 1].equals(stations[i])) {
                    throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.split("\n");

            for (int i = 0; i < stations.length; i++) {
                String currentLine = sOutput[i + 1].toLowerCase().trim();
                String currentStation = stations[i][0];
                String currentTransfer = stations[i][1];
                if (currentTransfer == null) {
                    if (!currentLine.equals(currentStation.toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                    }
                } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                    !currentLine.contains(currentTransfer.toLowerCase())) {
                    throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                }
            }
        }
    }
  learner_created: false
- name: test/baltimore.json
  visible: false
  text: |-
    {
      "SubwayLink": {
        "1": {
          "name": "Owings Mills",
          "transfer": []
        },
        "2": {
          "name": "Old Court",
          "transfer": []
        },
        "3": {
          "name": "Milford Mill",
          "transfer": []
        },
        "4": {
          "name": "Reiserstown Plaza",
          "transfer": []
        },
        "5": {
          "name": "Rogers Avenue",
          "transfer": []
        },
        "6": {
          "name": "West Cold Spring",
          "transfer": []
        },
        "7": {
          "name": "Mondawmin",
          "transfer": []
        },
        "8": {
          "name": "Penn North",
          "transfer": []
        },
        "9": {
          "name": "Uptown",
          "transfer": []
        },
        "10": {
          "name": "State Center",
          "transfer": []
        },
        "11": {
          "name": "Lexington Market",
          "transfer": []
        },
        "12": {
          "name": "Charles Center",
          "transfer": []
        },
        "13": {
          "name": "Shot Tower/Market Place",
          "transfer": []
        },
        "14": {
          "name": "Johns Hopkins Hospital",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": []
        },
        "2": {
          "name": "Epenex",
          "transfer": []
        },
        "3": {
          "name": "Crochy",
          "transfer": []
        },
        "4": {
          "name": "Cerisaie",
          "transfer": []
        },
        "5": {
          "name": "Bassenges",
          "transfer": []
        },
        "6": {
          "name": "EPFL",
          "transfer": []
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": []
        },
        "8": {
          "name": "Mouline",
          "transfer": []
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": []
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": []
        },
        "11": {
          "name": "Melley",
          "transfer": []
        },
        "12": {
          "name": "Provence",
          "transfer": []
        },
        "13": {
          "name": "Montelly",
          "transfer": []
        },
        "14": {
          "name": "Vigie",
          "transfer": []
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": []
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": []
        },
        "2": {
          "name": "Vennes",
          "transfer": []
        },
        "3": {
          "name": "Fourmi",
          "transfer": []
        },
        "4": {
          "name": "Sallaz",
          "transfer": []
        },
        "5": {
          "name": "CHUV",
          "transfer": []
        },
        "6": {
          "name": "Ours",
          "transfer": []
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": []
        },
        "8": {
          "name": "Bessieres",
          "transfer": []
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": []
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": []
        },
        "11": {
          "name": "Grancy",
          "transfer": []
        },
        "12": {
          "name": "Delices",
          "transfer": []
        },
        "13": {
          "name": "Jourdils",
          "transfer": []
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol",
          "transfer": []
        },
        "2": {
          "name": "Petriny",
          "transfer": []
        },
        "3": {
          "name": "Nadrazi Veleslavin",
          "transfer": []
        },
        "4": {
          "name": "Borislavka",
          "transfer": []
        },
        "5": {
          "name": "Dejvicka",
          "transfer": []
        },
        "6": {
          "name": "Hradcanska",
          "transfer": []
        },
        "7": {
          "name": "Malostranska",
          "transfer": []
        },
        "8": {
          "name": "Staromestska",
          "transfer": []
        },
        "9": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Mustek"
            }
          ]
        },
        "10": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Muzeum"
            }
          ]
        },
        "11": {
          "name": "Namesti Miru",
          "transfer": []
        },
        "12": {
          "name": "Jiriho z Podebrad",
          "transfer": []
        },
        "13": {
          "name": "Flora",
          "transfer": []
        },
        "14": {
          "name": "Zelivskeho",
          "transfer": []
        },
        "15": {
          "name": "Strasnicka",
          "transfer": []
        },
        "16": {
          "name": "Skalka",
          "transfer": []
        },
        "17": {
          "name": "Depo Hostivar",
          "transfer": []
        }
      },
      "Linka B": {
        "1": {
          "name": "Cerny Most",
          "transfer": []
        },
        "2": {
          "name": "Rajska zahrada",
          "transfer": []
        },
        "3": {
          "name": "Hloubetin",
          "transfer": []
        },
        "4": {
          "name": "Kolbenova",
          "transfer": []
        },
        "5": {
          "name": "Vysocanska",
          "transfer": []
        },
        "6": {
          "name": "Ceskomoravska",
          "transfer": []
        },
        "7": {
          "name": "Palmovka",
          "transfer": []
        },
        "8": {
          "name": "Invalidovna",
          "transfer": []
        },
        "9": {
          "name": "Krizikova",
          "transfer": []
        },
        "10": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Florenc"
            }
          ]
        },
        "11": {
          "name": "Namesti Republiky",
          "transfer": []
        },
        "12": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Mustek"
            }
          ]
        },
        "13": {
          "name": "Narodni trida",
          "transfer": []
        },
        "14": {
          "name": "Karlovo namesti",
          "transfer": []
        },
        "15": {
          "name": "Andel",
          "transfer": []
        },
        "16": {
          "name": "Smichovske nadrazi",
          "transfer": []
        },
        "17": {
          "name": "Radlicka",
          "transfer": []
        },
        "18": {
          "name": "Jinonice",
          "transfer": []
        },
        "19": {
          "name": "Nove Butovice",
          "transfer": []
        },
        "20": {
          "name": "Hurka",
          "transfer": []
        },
        "21": {
          "name": "Luziny",
          "transfer": []
        },
        "22": {
          "name": "Luka",
          "transfer": []
        },
        "23": {
          "name": "Stodulky",
          "transfer": []
        },
        "24": {
          "name": "Zlicin",
          "transfer": []
        }
      },
      "Linka C": {
        "1": {
          "name": "Letnany",
          "transfer": []
        },
        "2": {
          "name": "Prosek",
          "transfer": []
        },
        "3": {
          "name": "Strizkov",
          "transfer": []
        },
        "4": {
          "name": "Ladvi",
          "transfer": []
        },
        "5": {
          "name": "Kobylisy",
          "transfer": []
        },
        "6": {
          "name": "Nadrazi Holesovice",
          "transfer": []
        },
        "7": {
          "name": "Vltavska",
          "transfer": []
        },
        "8": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Florenc"
            }
          ]
        },
        "9": {
          "name": "Hlavni nadrazi",
          "transfer": []
        },
        "10": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka A",
              "station": "Muzeum"
            }
          ]
        },
        "11": {
          "name": "I.P.Pavlova",
          "transfer": []
        },
        "12": {
          "name": "Vysehrad",
          "transfer": []
        },
        "13": {
          "name": "Prazskeho povstani",
          "transfer": []
        },
        "14": {
          "name": "Pankrac",
          "transfer": []
        },
        "15": {
          "name": "Budejovicka",
          "transfer": []
        },
        "16": {
          "name": "Kacerov",
          "transfer": []
        },
        "17": {
          "name": "Roztyly",
          "transfer": []
        },
        "18": {
          "name": "Chodov",
          "transfer": []
        },
        "19": {
          "name": "Opatov",
          "transfer": []
        },
        "20": {
          "name": "Haje",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: src/metro/commands/AppendCommand.java
  visible: true
  text: |
    package metro;

    public class AppendCommand implements StorageCommand {
        private final String lineName;
        private final String stationName;

        public AppendCommand(String lineName, String stationName) {
            this.lineName = lineName;
            this.stationName = stationName;
        }

        @Override
        public void run(SubwayStorage storage) {
            storage.append(lineName, stationName);
        }
    }
  learner_created: true
- name: src/metro/commands/ConsoleCommand.java
  visible: true
  text: |
    package metro;


    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class ConsoleCommand {
        private static final Pattern NAME_PATTERN = Pattern.compile("/(\\S+)");
        private static final Pattern ARG_PATTERN = Pattern.compile("\\s*(\"([^\"]+)\"|(\\S+))\\s*");

        public List<String> getArgs() {
            return args;
        }

        private final String type;
        private final List<String> args;

        private ConsoleCommand(String type, List<String> args) {
            this.type = type;
            this.args = args;
        }

        public static ConsoleCommand parse(String cmd) {
            final Matcher nameMatcher = NAME_PATTERN.matcher(cmd);
            final String cmdName;
            final String argsPart;
            if (nameMatcher.find() && nameMatcher.start() == 0) {
                cmdName = nameMatcher.group(1);
                argsPart = cmd.substring(nameMatcher.end());
            } else {
                throw new IllegalStateException("Incorrect format of command. Command: " + cmd);
            }
            Matcher argMatcher = ARG_PATTERN.matcher(argsPart);
            List<String> args = new ArrayList<>();
            while (argMatcher.find()) {
                String group = argMatcher.group(2);
                final String value = group == null? argMatcher.group(3) : group;
                args.add(value);
            }
            return new ConsoleCommand(cmdName, Collections.unmodifiableList(args));
        }

        public String getType() {
            return type;
        }
    }
  learner_created: true
- name: src/metro/commands/StorageCommand.java
  visible: true
  text: |
    package metro;

    @FunctionalInterface
    public interface StorageCommand {

        void run(SubwayStorage storage);
    }
  learner_created: true
- name: src/metro/commands/StorageCommandFactory.java
  visible: true
  text: |
    package metro;

    public interface StorageCommandFactory {
        StorageCommand get();

        static StorageCommand fromCommand(final String cmd) {
            return new StorageCommandFactoryImpl(ConsoleCommand.parse(cmd))
                    .get();
        }
    }
  learner_created: true
- name: src/metro/commands/StorageCommandFactoryImpl.java
  visible: true
  text: |
    package metro;

    import java.util.List;

    public class StorageCommandFactoryImpl implements StorageCommandFactory {
        private final ConsoleCommand command;

        public StorageCommandFactoryImpl(ConsoleCommand command) {
            this.command = command;
        }

        @Override
        public StorageCommand get() {
            final String type = command.getType();
            final List<String> args = command.getArgs();
            switch (type) {
                case "append":
                    return StorageCommands.append(args.get(0), args.get(1));
                case "add-head":
                    return StorageCommands.addHead(args.get(0), args.get(1));
                case "output":
                    return StorageCommands.output(args.get(0));
                case "remove":
                    return StorageCommands.remove(args.get(0), args.get(1));
                case "exit":
                    return StorageCommands.exit();
                default:
                    throw new IllegalStateException("Unsupported command : " + type);
            }
        }
    }
  learner_created: true
- name: src/metro/commands/StorageCommands.java
  visible: true
  text: |
    package metro;

    import java.util.List;
    import java.util.stream.Collectors;

    public class StorageCommands {

        private StorageCommands() {
        }

        static StorageCommand append(final String lineName, final String stationName) {
            return new AppendCommand(lineName, stationName);
        }

        static StorageCommand addHead(final String lineName, final String stationName) {
            return storage -> storage.addHead(lineName, stationName);
        }
        public static StorageCommand remove(final String lineName, final String stationName) {
            return storage -> storage.remove(lineName, stationName);
        }

        public static StorageCommand output(final String lineName) {
            return storage -> Printer.stations(storage.stationsByLine(lineName)).print();
        }

        private static String format(String lineName, SubwayStorage storage) {
            List<String> elements = storage.stationsByLine(lineName);
            return elements.stream().collect(Collectors.joining(
                    " - ", "depot - ", " - depot"
            ));
        }

        public static StorageCommand exit() {
            return storage -> System.exit(0);
        }
    }
  learner_created: true
- name: src/metro/printer/Printer.java
  visible: true
  text: |
    package metro;

    import java.util.List;

    public interface Printer {
        void print();

         static Printer stations(final List<String> stations) {
            return new StationsPrinter(stations);
        }
    }
  learner_created: true
- name: src/metro/printer/StationsPrinter.java
  visible: true
  text: |
    package metro;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.util.ArrayDeque;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Deque;
    import java.util.Iterator;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.stream.Collectors;

    class StationsPrinter implements Printer {
        public static final String DEPOT = "depot";
        private final List<String> stations;

        public StationsPrinter(List<String> stations) {
            final Deque<String> deque = new ArrayDeque<>(stations);
            deque.addFirst(DEPOT);
            this.stations = Collections.unmodifiableList(new ArrayList<>(deque));
        }

        @Override
        public void print() {
            List<List<String>> groups = buildGroups(stations);
            for (List<String> group : groups) {
                System.out.println(String.join(" - ", group));
            }
        }


        private static List<List<String>> buildGroups(List<String> stations) {
            List<List<String>> groups = new ArrayList<>();
            Iterator<String> it = stations.iterator();
            int i = 0;
            while (it.hasNext()) {
                String s = it.next();
                int size = groups.size();
                if (size <= i && i < stations.size() - 1) {
                    LinkedList<String> list = new LinkedList<>();
                    list.add(s);
                    groups.add(list);
                }
                if (i > 0) {
                    if (size > 1 && i < groups.size() + 2) {
                        groups.get(i - 2).add(s);
                    }
                    if (size > 0 && i < groups.size() + 1) {
                        groups.get(i - 1).add(s);
                    }
                }
                i++;
            }
            if (!stations.isEmpty() && !groups.isEmpty()) {
                groups.get(groups.size() - 1).add(stations.get(0));
            }
            return groups;
        }
    }
  learner_created: true
- name: src/metro/model/Station.java
  visible: true
  learner_created: true
- name: src/metro/model/Transfer.java
  visible: true
  learner_created: true
- name: src/metro/storage/InMemorySubwayStorage.java
  visible: true
  text: "package metro;\n\nimport java.util.ArrayList;\nimport java.util.Deque;\n\
    import java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\
    import java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class InMemorySubwayStorage\
    \ implements SubwayStorage {\n    private final Map<String, Deque<String>> storage;\n\
    \n    public InMemorySubwayStorage(Map<String, Deque<String>> storage) {\n   \
    \     this.storage = storage;\n    }\n\n    @Override\n    public List<String>\
    \ stationsByLine(String lineName) {\n        return new ArrayList<>(storage.get(lineName));\n\
    \    }\n\n    @Override\n    public void append(String lineName, String stationName)\
    \ {\n        storage.computeIfAbsent(lineName, n -> new ConcurrentLinkedDeque<>())\n\
    \                .add(stationName); \n    }\n\n    @Override\n    public void\
    \ addHead(String lineName, String stationName) {\n        storage.computeIfAbsent(lineName,\
    \ n -> new LinkedList<>())\n                .addFirst(stationName);\n    }\n\n\
    \    @Override\n    public void remove(String lineName, String stationName) {\n\
    \        Deque<String> stations = storage.get(lineName);\n        if (stations\
    \ != null) {\n            stations.remove(stationName);\n        }\n    }\n}\n"
  learner_created: true
- name: src/metro/storage/SubwayStorage.java
  visible: true
  text: |
    package metro;

    import com.google.gson.Gson;
    import com.google.gson.reflect.TypeToken;

    import java.io.IOException;
    import java.io.Reader;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.util.ArrayDeque;
    import java.util.Comparator;
    import java.util.Deque;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static java.util.Map.Entry.comparingByKey;

    public interface SubwayStorage {
        List<String> stationsByLine(final String lineName);

        void append(String lineName, String stationName);

        void addHead(String lineName, String stationName);

        void remove(String lineName, String stationName);

        static SubwayStorage fromJsonFile(Path pathToFile) throws IOException {
            Gson gson = new Gson();
            TypeToken<Map<String, Map<String, String>>> mapTypeToken = new TypeToken<Map<String, Map<String, String>>>() {
            };
            try (final Reader reader = Files.newBufferedReader(pathToFile)) {
                Map<String, Map<String, String>> storage = gson.fromJson(reader, mapTypeToken.getType());
                return new InMemorySubwayStorage(storage.entrySet().stream()
                        .collect(Collectors.toMap(Map.Entry::getKey, e -> mapToDeque(e.getValue()))));
            }
        }

        static Deque<String> mapToDeque(final Map<String, String> map) {
            return map.entrySet()
                    .stream()
                    .sorted(Comparator.comparingInt(e -> Integer.parseInt(e.getKey())))
                    .map(Map.Entry::getValue)
                    .collect(Collectors.toCollection(ArrayDeque::new));
        }
    }
  learner_created: true
- name: src/metro/commands/ConnectCommand.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10343#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 29 Mar 2022 19:49:32 UTC
record: -1
