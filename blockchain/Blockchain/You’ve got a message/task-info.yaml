type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import java.util.Iterator;

    public class Main {
        public static void main(String[] args) {
            int code = '1';
            char c = '1' + '3';
            System.out.println((char) 100);
        }
    }
  learner_created: false
- name: src/blockchain/BlockChain.java
  visible: true
  text: "package blockchain;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport\
    \ java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\
    import java.util.Deque;\nimport java.util.Iterator;\nimport java.util.Spliterator;\n\
    import java.util.UUID;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport\
    \ java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\
    import java.util.function.Consumer;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\
    \npublic class BlockChain implements Iterable<BlockChain.Block> {\n    private\
    \ final Lock lock = new ReentrantLock();\n    private final Deque<Block> blocks;\n\
    \n    private BlockChain() {\n        this.blocks = new ConcurrentLinkedDeque<>();\n\
    \    }\n\n    public static BlockChain getInstance() {\n        return new BlockChain();\n\
    \    }\n\n    public Block mine() {\n        lock.lock();\n        try {\n   \
    \         final BlockChain.Block block = blocks.isEmpty() ? Block.first() : blocks.peekLast().next();\n\
    \            blocks.add(block);\n            return block;\n        } finally\
    \ {\n            lock.unlock();\n        }\n    }\n\n    @NotNull\n    @Override\n\
    \    public Iterator<Block> iterator() {\n        return blocks.iterator();\n\
    \    }\n\n    @Override\n    public void forEach(Consumer<? super Block> action)\
    \ {\n        blocks.forEach(action);\n    }\n\n    @Override\n    public Spliterator<BlockChain.Block>\
    \ spliterator() {\n        return blocks.spliterator();\n    }\n\n    public static\
    \ BlockChain withSize(final int size) {\n        final BlockChain chain = new\
    \ BlockChain();\n        for (int i = 0; i < size; i++) {\n            chain.mine();\n\
    \        }\n        return chain;\n    }\n\n    public static class Block {\n\
    \        private static final MessageDigest DIGEST = SHA256Digest();\n       \
    \ private final long id;\n        private final long ts;\n        private final\
    \ String previousHashBlock;\n        private final String hash;\n\n        public\
    \ long getId() {\n            return id;\n        }\n\n        public long getTs()\
    \ {\n            return ts;\n        }\n\n        public String getPreviousHashBlock()\
    \ {\n            return previousHashBlock;\n        }\n\n        public String\
    \ getHash() {\n            return hash;\n        }\n\n        public Block(long\
    \ id, long ts, String previousHashBlock, String hash) {\n            this.id =\
    \ id;\n            this.ts = ts;\n            this.previousHashBlock = previousHashBlock;\n\
    \            this.hash = hash;\n        }\n\n        private static BlockChain.Block\
    \ first() {\n            return new BlockChain.Block(1, System.currentTimeMillis(),\
    \ \"0\", applySha256(UUID.randomUUID().toString()));\n        }\n\n        private\
    \ BlockChain.Block next() {\n            return new BlockChain.Block(id + 1, System.currentTimeMillis(),\
    \ this.hash, applySha256(hash + (id + 1)));\n        }\n\n        @Override\n\
    \        public String toString() {\n            return String.format(\"%nBlock:%nId:\
    \ %d%nTimestamp: %d%n\" +\n                            \"Hash of the previous\
    \ block: %n%s%n\" +\n                            \"Hash of the block: %n%s\",\n\
    \                    id, ts, previousHashBlock, hash\n            );\n       \
    \ }\n\n        public static String applySha256(String input) {\n            try\
    \ {\n                /* Applies sha256 to our input */\n                byte[]\
    \ hash = DIGEST.digest(input.getBytes(UTF_8));\n                StringBuilder\
    \ hexString = new StringBuilder();\n                for (byte elem : hash) {\n\
    \                    String hex = Integer.toHexString(0xff & elem);\n        \
    \            if (hex.length() == 1) {\n                        hexString.append('0');\n\
    \                    }\n                    hexString.append(hex);\n         \
    \       }\n                return hexString.toString();\n            } catch (Exception\
    \ e) {\n                throw new IllegalStateException(e);\n            }\n \
    \       }\n    }\n\n\n    public static MessageDigest SHA256Digest() {\n     \
    \   try {\n            return MessageDigest.getInstance(\"SHA-256\");\n      \
    \  } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e);\n\
    \        }\n    }\n    \n}\n"
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/BlockchainClientImpl.java
  visible: true
  text: |
    package blockchain;

    public class BlockchainClientImpl implements BlockchainClient {
        private final BlockChain blockChain;

        public BlockchainClientImpl(BlockChain blockChain) {
            this.blockChain = blockChain;
        }

        @Override
        public Block last() {
            return blockChain.last();
        }

        @Override
        public ValidationResult validate(Block block) {
            return blockChain.validate(block);
        }

        @Override
        public boolean isAvailable() {
            return !blockChain.isCompleted();
        }
    }
  learner_created: true
- name: src/blockchain/events/MinedBlockData.java
  visible: true
  text: |
    package blockchain.events;

    import blockchain.Block;
    import blockchain.Miner;

    public class MinedBlockData {
        private final Miner miner;
        private final Block block;

        public RequiredZeroesData getRequiredZeroesData() {
            return requiredZeroesData;
        }

        private final RequiredZeroesData requiredZeroesData;

        private MinedBlockData(Miner miner, Block block, RequiredZeroesData requiredZeroesData) {
            this.miner = miner;
            this.block = block;
            this.requiredZeroesData = requiredZeroesData;
        }

        public static MinedBlockData create(Miner miner, Block block, RequiredZeroesData requiredZeroes) {
            return new MinedBlockData(miner, block, requiredZeroes);
        }

        public Miner getMiner() {
            return miner;
        }

        public Block getBlock() {
            return block;
        }
    }
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    import blockchain.events.EventListener;
    import blockchain.events.MinedBlockData;

    public interface Miner {
        public static SimpleMiner simple(BlockchainClient client, int id) {
            return new SimpleMiner(client, id);
        }

        int id();

        Block mine();

        void addListener(final EventListener<MinedBlockData> listener);
    }
  learner_created: true
- name: src/blockchain/MinerFactory.java
  visible: true
  text: |
    package blockchain;

    public interface MinerFactory {
        void start();
        void register(Miner miner);
        void stop() throws InterruptedException;
    }
  learner_created: true
- name: src/blockchain/ConcurrentMinerFactory.java
  visible: true
  text: |
    package blockchain;

    import blockchain.events.EventManager;
    import blockchain.events.MinedBlockData;
    import blockchain.events.BasicEventManager;

    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.TimeUnit;

    public class ConcurrentMinerFactory implements MinerFactory {
        private final ExecutorService executor = Executors.newCachedThreadPool();
        private final EventManager<MinedBlockData> eventManager = BasicEventManager.create();


        @Override
        public void start() {
        }

        @Override
        public void register(Miner miner) {
            executor.execute(miner::mine);
        }

        @Override
        public void stop() throws InterruptedException {
            executor.shutdown();
            boolean isTerminated = executor.awaitTermination(1, TimeUnit.MINUTES);
            if (!isTerminated) {
                throw new IllegalStateException("Unable to shutdown executor service");
            }
        }
    }
  learner_created: true
- name: src/blockchain/events/EventType.java
  visible: true
  text: "package blockchain.events;\n\npublic enum EventType {\n    MINED(MinedBlockData.class);\n\
    \    \n    private final Class<?> dataTypeClass;\n\n    EventType(Class<?> minedBlockDataClass)\
    \ {\n        this.dataTypeClass = minedBlockDataClass;\n    }\n}\n"
  learner_created: true
- name: src/blockchain/BlockChainUtils.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

    public final class BlockChainUtils {
        private BlockChainUtils() {
        }

        static boolean isProved(final String hash, int requiredZeroes) {
            if (requiredZeroes > hash.length()) {
                return false;
            }
            for (int i = 0; i < requiredZeroes; i++) {
                if (hash.charAt(i) != '0') {
                    return false;
                }
            }
            return true;
        }

        static MessageDigest SHA256Digest() {
            try {
                return MessageDigest.getInstance("SHA-256");
            } catch (NoSuchAlgorithmException e) {
                throw new IllegalStateException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/events/EventListener.java
  visible: true
  text: |
    package blockchain.events;

    public interface EventListener<T> {
        void handle(T data);
    }
  learner_created: true
- name: src/blockchain/BlockchainClient.java
  visible: true
  text: |
    package blockchain;

    public interface BlockchainClient {
        Block last();
        ValidationResult validate(Block block);

        boolean isAvailable();
    }
  learner_created: true
- name: src/blockchain/BlockBuilder.java
  visible: true
  text: |
    package blockchain;

    public class BlockBuilder {
        private final long id;
        private long ts;
        private long magicNumber;
        private Block previousHashBlock;
        private String hash;

        public BlockBuilder(long id) {
            this.id = id;
        }

        public BlockBuilder ts(long ts) {
            this.ts = ts;
            return this;
        }

        public BlockBuilder magicNumber(long magicNumber) {
            this.magicNumber = magicNumber;
            return this;
        }

        public BlockBuilder previousHashBlock(Block previousHashBlock) {
            this.previousHashBlock = previousHashBlock;
            return this;
        }

        public BlockBuilder hash(String hash) {
            this.hash = hash;
            return this;
        }

        public Block createBlock() {
            return new Block(id, ts > 0 ? ts : System.currentTimeMillis(), magicNumber, previousHashBlock, hash);
        }
    }
  learner_created: true
- name: src/blockchain/SimpleMiner.java
  visible: true
  text: |
    package blockchain;

    import blockchain.events.BasicEventManager;
    import blockchain.events.EventListener;
    import blockchain.events.EventManager;
    import blockchain.events.MinedBlockData;

    import java.util.concurrent.ThreadLocalRandom;

    import static blockchain.Block.applySha256;

    public class SimpleMiner implements Miner {
        private static final EventManager<MinedBlockData> EVENT_MANAGER = BasicEventManager.create();

        private final BlockchainClient client;
        private final int id;

        SimpleMiner(BlockchainClient client, int id) {
            this.client = client;
            this.id = id;
        }

        public void addListener(final EventListener<MinedBlockData> listener) {
            EVENT_MANAGER.subscribe(listener);
        }


        @Override
        public int id() {
            return id;
        }

        @Override
        public Block mine() {
            while (client.isAvailable()) {
                final Block block = mineBlock();
                final ValidationResult validationResult = client.validate(block);
                if (validationResult.isValid()) {
                    final MinedBlockData data = MinedBlockData.create(this, block, validationResult.getRequiredZeroes());
                    EVENT_MANAGER.notify(data);
                }
            }
            return null;
        }

        private Block mineBlock() {
            try {
                Block lastBlock = client.last();
                long magicNumber = ThreadLocalRandom.current().nextLong();
                final String baseHash = lastBlock.getHash();
                String nextHash = applySha256(baseHash + magicNumber);
                return Block.builder(lastBlock.getId() + 1)
                        .magicNumber(magicNumber)
                        .previousHashBlock(lastBlock)
                        .hash(nextHash)
                        .createBlock();
            } catch (Exception e) {
                return mineBlock();
            }
        }
    }
  learner_created: true
- name: src/blockchain/events/BasicEventManager.java
  visible: true
  text: |
    package blockchain.events;

    import java.util.LinkedHashSet;
    import java.util.Set;

    public class BasicEventManager<T> implements EventManager<T> {
        private final Set<EventListener<T>> listeners;

        private BasicEventManager() {
            listeners = new LinkedHashSet<>();
        }

        public static <T> EventManager<T> create() {
            return new BasicEventManager<>();
        }

        @Override
        public void notify(T data) {
            listeners.forEach(listener -> listener.handle(data));
        }

        @Override
        public void subscribe(EventListener<T> listener) {
            listeners.add(listener);
        }

        @Override
        public void unsubscribe(EventListener<T> listener) {
            listeners.remove(listener);
        }
    }
  learner_created: true
- name: src/blockchain/ValidationResult.java
  visible: true
  text: |
    package blockchain;

    import blockchain.events.RequiredZeroesData;

    public class ValidationResult {
        private final RequiredZeroesData requiredZeroes;
        private final boolean isValid;

        private ValidationResult(RequiredZeroesData requiredZeroes, boolean isValid) {
            this.requiredZeroes = requiredZeroes;
            this.isValid = isValid;
        }

        public static ValidationResult create(RequiredZeroesData requiredZeroes, boolean isValid) {
            return new ValidationResult(requiredZeroes, isValid);
        }

        public RequiredZeroesData getRequiredZeroes() {
            return requiredZeroes;
        }

        public boolean isValid() {
            return isValid;
        }
    }
  learner_created: true
- name: src/blockchain/events/RequiredZeroesData.java
  visible: true
  text: |
    package blockchain.events;

    public class RequiredZeroesData {
        private final int before;
        private final int after;

        private RequiredZeroesData(int before, int after) {
            this.before = before;
            this.after = after;
        }

        public static RequiredZeroesData create(int before, int after) {
            return new RequiredZeroesData(before, after);
        }

        public int getBefore() {
            return before;
        }

        public int getAfter() {
            return after;
        }
    }
  learner_created: true
- name: src/blockchain/events/EventManager.java
  visible: true
  text: |
    package blockchain.events;


    public interface EventManager<T> {
        void notify(T data);

        void subscribe(EventListener<T> listener);

        void unsubscribe(EventListener<T> listener);
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;
    import java.time.Duration;

    import static blockchain.BlockChainUtils.SHA256Digest;
    import static java.nio.charset.StandardCharsets.UTF_8;

    public class Block {
        private static final MessageDigest DIGEST = SHA256Digest();
        private final long id;
        private final long ts;
        private final Block previousBlock;
        private final String hash;
        private final long magicNumber;

        public Block(long id, long ts, long magicNumber, Block previousHashBlock, String hash) {
            this.id = id;
            this.ts = ts;
            this.magicNumber = magicNumber;
            this.previousBlock = previousHashBlock;
            this.hash = hash;
        }

        static Block first() {
            return Block.builder(0)
                    .ts(System.currentTimeMillis())
                    .hash("0")
                    .createBlock();
        }

        public static String applySha256(String input) {
            /* Applies sha256 to our input */
            byte[] hash = DIGEST.digest(input.getBytes(UTF_8));
            StringBuilder hexString = new StringBuilder();
            for (byte elem : hash) {
                String hex = Integer.toHexString(0xff & elem);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        }

        public static BlockBuilder builder(long id) {
            return new BlockBuilder(id);
        }

        public long getId() {
            return id;
        }

        public long getTs() {
            return ts;
        }

        public String getHash() {
            return hash;
        }

        Duration miningDuration() {
            return Duration.ofMillis(ts - previousBlock.ts);
        }


        @Override
        public String toString() {
            final long durationSeconds = miningDuration().toSeconds();

            return String.format("Id: %d%nTimestamp: %d%n" +
                            "Magic number: %d%n" +
                            "Hash of the previous block: %n%s%n" +
                            "Hash of the block: %n%s%n" +
                            "Block was generating for %d seconds",
                    id, ts, magicNumber, previousBlock.hash, hash, durationSeconds
            );
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5416#comment
status: Unchecked
record: -1
